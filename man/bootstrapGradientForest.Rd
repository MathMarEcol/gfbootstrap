% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gfbootstrap.R
\name{bootstrapGradientForest}
\alias{bootstrapGradientForest}
\title{Generate a bootstrapped GF object}
\usage{
bootstrapGradientForest(
  x,
  predictor.vars,
  response.vars,
  nbootstrap = 10,
  nsamples = nrow(x),
  mtry = NULL,
  transform = NULL,
  maxLevel = 0,
  corr.threshold = 0.5,
  compact = FALSE,
  nbin = 101,
  trace = FALSE
)
}
\arguments{
\item{x}{data.frame, rows as observations, columns are either predictors or responses}

\item{predictor.vars}{columns in x that are predictors}

\item{response.vars}{columns in x that are responses}

\item{nsamples}{number of samples taken at each bootstrapped model fit

see gradientForest::gradientForest() for mtry, transform, maxLevel, corr.threshold, compact, nbin, trance parameters}

\item{nboostraps}{number of bootstrapped models to fit}
}
\description{
The bootstrapped GF object is bootstrapped by fitting many GF models, each with a single tree.
So this model is really a list of GF models, with some parameters pre-specified.
Many of the options will be disabled if possible.
The models are not intended to be combined.
The bootstrapped GF model can use predict.gfbootstrap, which generates many points per input point, with a total of n_models * nrow(predict_points)
}
\details{
Given a training set of site by species+environment, and a set of relevant GF fitting parameters, you get
a single object back with class gfbootstrap, which is internally a list of gf models.
Each gf model in the list is fitted with exactly 1 tree and a bootstrapped set of inputs.
The ntree parameter is not available, see nbootstraps instead.
All other parameters are passed on as is, although some defaults have been changed.

Are some parameters meaningless, and worth discarding?

gfbootstrap is \code{future}-aware, so setting up a parallel plan before calling gfbootstrap will speed up processing.
Not specifying a \code{future} plan will default to standard sequential processing.
See future.seed
}
\examples{

library(gradientForest)
data(CoMLsimulation)
predictor.vars <- colnames(Xsimulation)
response.vars <- colnames(Ysimulation)
demobootstrap <- bootstrapGradientForest(x = data.frame(Ysimulation,Xsimulation),
predictor.vars = predictor.vars,
response.vars = response.vars,
nbootstrap = 100, #small, should be 500 or 1000 in a real experiment
compact = T, nbin = 200,
transform = NULL,
corr.threshold = 0.5,
maxLevel = floor(log2(length(response.vars)*0.368/2)),
trace = TRUE
)
}
